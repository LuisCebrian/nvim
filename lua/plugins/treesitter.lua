return {
    "nvim-treesitter/nvim-treesitter",
    event = "BufReadPost",
    build = function()
        pcall(require("nvim-treesitter.install").update { with_sync = true })
    end,
    dependencies = {
        "nvim-treesitter/nvim-treesitter-textobjects"
    },

    config = function()
        require 'nvim-treesitter.configs'.setup {
            ensure_installed = {
                "angular",
                "asm",
                "awk",
                "bash",
                "c",
                "c_sharp",
                "cmake",
                "comment",
                "commonlisp",
                "cpp",
                "css",
                "csv",
                "cue",
                "d",
                "dart",
                "diff",
                "dockerfile",
                "dot",
                "doxygen",
                "fish",
                "git_config",
                "git_rebase",
                "gitcommit",
                "gitignore",
                "go",
                "goctl",
                "gomod",
                "gosum",
                "gotmpl",
                "gowork",
                "graphql",
                "haskell",
                "haskell_persistent",
                "hcl",
                "helm",
                "html",
                "htmldjango",
                "http",
                "ini",
                "java",
                "javadoc",
                "javascript",
                "jinja",
                "jinja_inline",
                "jq",
                "json",
                "json5",
                "jsonnet",
                "julia",
                "kotlin",
                "lua",
                "luadoc",
                "luau",
                "make",
                "markdown",
                "markdown_inline",
                "mermaid",
                "nginx",
                "nickel",
                "objc",
                "passwd",
                "perl",
                "php",
                "php_only",
                "phpdoc",
                "promql",
                "proto",
                "python",
                "r",
                "readline",
                "regex",
                "rego",
                "rst",
                "ruby",
                "runescript",
                "rust",
                "scala",
                "scheme",
                "scss",
                "sql",
                "ssh_config",
                "terraform",
                "tmux",
                "toml",
                "tsv",
                "typescript",
                "typespec",
                "typoscript",
                "udev",
                "vim",
                "vimdoc",
                "vue",
                "xml",
                "yaml",
            },
            highlight = {
                enable = true, -- false will disable the whole extension
            },
            incremental_selection = {
                enable = true,
                keymaps = {
                    init_selection = '<c-space>',
                    node_incremental = '<c-space>',
                },
            },
            textobjects = {
                select = {
                    enable = true,
                    lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
                    keymaps = {
                        -- You can use the capture groups defined in textobjects.scm
                        ['aa'] = '@parameter.outer',
                        ['ia'] = '@parameter.inner',
                        ['af'] = '@function.outer',
                        ['if'] = '@function.inner',
                        ['ac'] = '@class.outer',
                        ['ic'] = '@class.inner',
                        ['al'] = '@loop.outer',
                        ['il'] = '@loop.inner',
                        ['as'] = '@statement.outer',
                        ['ab'] = '@block.outer',
                        ['ib'] = '@block.inner',
                    },
                },
                move = {
                    enable = true,
                    set_jumps = true, -- whether to set jumps in the jumplist
                    goto_next_start = {
                        [']m'] = '@function.outer',
                        [']]'] = '@parameter.inner',
                    },
                    goto_next_end = {
                        [']M'] = '@function.outer',
                        [']['] = '@parameter.inner',
                    },
                    goto_previous_start = {
                        ['[m'] = '@function.outer',
                        ['[['] = '@parameter.inner',
                    },
                    goto_previous_end = {
                        ['[M'] = '@function.outer',
                        ['[]'] = '@parameter.inner',
                    },
                },
                swap = {
                    enable = true,
                    swap_next = {
                        ['<leader>a'] = '@parameter.inner',
                    },
                    swap_previous = {
                        ['<leader>A'] = '@parameter.inner',
                    },
                },
            },
        }
    end
}
